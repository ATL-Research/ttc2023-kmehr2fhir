pre {
  var xmlTypeFactory = Native('org.eclipse.emf.ecore.xml.type.impl.XMLTypeFactoryImpl').init();

  var genderMap = Map {
    KMEHR!CDSEXvalues#changed = FHIR!AdministrativeGenderEnum#other,
    KMEHR!CDSEXvalues#female = FHIR!AdministrativeGenderEnum#female,
    KMEHR!CDSEXvalues#male = FHIR!AdministrativeGenderEnum#male,
    KMEHR!CDSEXvalues#unknown = FHIR!AdministrativeGenderEnum#unknown,
    KMEHR!CDSEXvalues#undefined = FHIR!AdministrativeGenderEnum#other
  };

  var systemMap = Map {
    "phone" = FHIR!ContactPointSystemEnum#phone,
    "mobile" = FHIR!ContactPointSystemEnum#phone,
    "fax" = FHIR!ContactPointSystemEnum#fax,
    "email" = FHIR!ContactPointSystemEnum#email
  };

  var relationshipMap = Map {
    'father' = 'FTH',
    'child' = 'CHILD',
    'familymember' = 'FAMMEMB',
    'spouse' = 'SPS',
    'husband' = 'HUSB',
    'partner' = 'DOMPART',
    'other' = 'thirdParty',
    'brother' = 'BRO',
    'sister' = 'SIS',
    'brotherinlaw' = 'BROINLAW',
    'tutor' = 'thirdParty',
    'notary' = 'thirdParty',
    'lawyer' = 'thirdParty',
    'employer' = 'thirdParty',
    'grandparent' = 'GRPRN',
    'son' = 'SON',
    'daugher' = 'DAU',
    'grandchild' = 'GRNDCHILD',
    'neighbour' = 'NBOR',
    'stepson' = 'STPSON',
    'stepdaughter' = 'STPDAU',
    'stepfather' = 'STPFTH',
    'stepmother' = 'STPMTH',
    'sisterinlaw' = 'SISINLAW'
  };
}

// RULES

rule DocumentRoot
  transform s: KMEHR!kmehr::DocumentRoot
  to t: FHIR!DocumentRoot
{
  t.bundle ::= s.kmehrmessage.folder.selectFirst(f | f.patient.isDefined());
}

rule Folder
  transform s: KMEHR!FolderType
  to t: FHIR!Bundle, bt: FHIR!BundleType
{
  guard: s.patient.isDefined()

  bt.value = FHIR!BundleTypeEnum#document;
  t.type = bt;

  t.entry.addAll(s.`transaction`.equivalents().flatten().select(e|e.isKindOf(FHIR!BundleEntry)));
  t.entry.addAll(s.patient.equivalents().flatten().select(e|e.isKindOf(FHIR!BundleEntry)));
}

rule SumEHRTransaction
  transform s: KMEHR!TransactionType
  to t: FHIR!Composition,
     cid: FHIR!Id,
     patRef: FHIR!Reference,
     cStatus: FHIR!CompositionStatus,
     dateTime: FHIR!fhir::DateTime
{
  guard: s.cd.exists(cd| cd.value = 'sumehr')

  // FolderType which contains this transaction 
  var f = s.eContainer;

  t.id = cid;
  t.identifier = Sequence { CompositionIdentifier(s.uuid()) };
  t.type = CodeableConcept(CodingWithDisplay('http://loinc.org', '60591-5', 'Patient summary Document'));
  t.subject = Sequence { patRef };
  t.status = cStatus;
  t.date = dateTime;
  
  t.section = Sequence {
    s.equivalent('MedicationSection'),
    s.equivalent('AllergyIntoleranceSection'),
    s.equivalent('ActiveProblemSection'),
    s.equivalent('ImmunizationSection'),
    s.equivalent('HistorySection')
  };

  cid.value = s.uuid();
  patRef.reference = FhirString('Patient/' + f.patient.uuid());

  cStatus.value = s.iscomplete ? (
    s.isvalidated ? FHIR!CompositionStatusEnum#final : FHIR!CompositionStatusEnum#preliminary
  ) : FHIR!CompositionStatusEnum#partial;

  dateTime.value = xmlTypeFactory.createDateTime(s.date.toXMLFormat() + 'T' + s.time.toXMLFormat());

  // SumEHRTransactionWithAuthor
  if (s.txAuthor().isDefined()) {
    var refPrefix = 'Other/';
    if (s.txAuthor().isOrganization()) {
      refPrefix = 'Organization/';
    } else if (s.txAuthor().isPractitioner()) {
      refPrefix = 'Practitioner/';
    }

    var authRef = new FHIR!Reference;
    t.author = Sequence { authRef };
    authRef.reference = FhirString(refPrefix + s.msgSender().uuid());
  }

  // SumEHRTransactionWithCustodian
  if (s.custodianItem().isDefined()) {
    var refPrefix = 'Other/';
    if (i.hcpartyContent.isOrganization()) {
      refPrefix = 'Organization/';
    } else if (i.hcpartyContent.isPractitioner()) {
      refPrefix = 'Practitioner/';
    }

    var gmdRef = new FHIR!Reference;
    t.custodian = gmdRef;
    gmdRef.reference = FhirString(refPrefix + i.hcpartyContent.uuid());  
  }
}

rule Patient
  transform s: KMEHR!PersonType
  to t: FHIR!Patient, pid: FHIR!Id, humanName: FHIR!HumanName
{
  guard: s.eContainingFeature.name == 'patient'

  var f = s.eContainer;

  t.id = pid;
  t.active = FhirBoolean(true);
  t.name = Sequence { humanName };
  t.gender = s.sex.equivalent('AdministrativeGender');
  t.birthDate = s.birthdate.equivalent('FhirDate');

  t.address ::= s.address;
  t.telecom = s.telecom.equivalent().select(e|e.isKindOf(FHIR!ContactPoint));

  // TODO - implement PatientContact rule
  var contactSources = f.`transaction`.collect(tx |
      tx.item.select(i | i.isContactPerson())
             .collect(i | i.content.collect(c | c.person))
    ).flatten();
  contactSources.println('sources: ');

  var mappedSources = contactSources
     .collect(contact | contact.equivalent('PatientContact'))
     .reject(e|e.isUndefined();
  mappedSources.println('mapped sources: ');

  t.contact.addAll(mappedSources);

  pid.value = s.uuid();
  humanName.family = FhirString(s.familyname);
  humanName.given = s.firstname.collect(fn | FhirString(fn));
}

rule Address
  transform s: KMEHR!AddressType
  to t: FHIR!Address
{
  t.line = Sequence { FhirString(s.addressLine()) };
  t.postalCode = FhirString(s.zip);
  t.city = FhirString(s.city);
  t.country = FhirString(s.countryString());
}

rule Telecom
  transform s: KMEHR!TelecomType
  to t: FHIR!ContactPoint, system: FHIR!ContactPointSystem, use: FHIR!ContactPointUse
{
  t.system = system;
  t.value = FhirString(s.telecomnumber.trim());
  t.use = use;

  system.value = s.system();
  use.value = s.contactPointUse();
}

rule PatientContact
  transform i: KMEHR!PersonType
  to t: FHIR!PatientContact, humanName: FHIR!HumanName
{
  guard: (
    s.eContainer.isDefined()
    and s.eContainingFeature.name = 'person'
    and s.eContainer.eContainer.isDefined()
    and s.eContainer.eContainer.isContactPerson()
  )

  var c = s.eContainer;
  var i = c.eContainer;

  t.name = humanName;
  t.gender = s.sex.equivalent('AdministrativeGender');
  t.address ::= s.address;
  t.telecom ::= s.telecom;
  t.relationship ::= i.contactPersonRelationships;

  humanName.family = FhirString(s.familyname);
  humanName.given = s.firstname.collect(e | FhirString(e));
}

// CONTEXT OPERATIONS

operation Any countryString() : String {
  return null;
}

operation Any msgSender() {
  // Same as in ATL transformation - no clear explanation why
  return null;
}

@cached
operation Any uuid(): String {
  var uuidClass = Native('java.util.UUID');
  return uuidClass.randomUUID().asString();
}

operation KMEHR!AddressType addressLine() : String {
  return Sequence {self.street, self.housenumber, self.postboxnumber}
	.reject(s | s.isUndefined() or s = '')
	.concat(' ');
}

operation KMEHR!AddressType countryString() : String {
  return self.country.countryString();
}

operation KMEHR!CountryType countryString() : String {
  return self.cd.countryString();
}

operation KMEHR!CDCOUNTRY countryString() : String {
  return self.value.countryString();
}

operation String countryString() : String {
  return self.toUpperCase();
}

@cached
operation KMEHR!CDHCPARTY isOrganization() : Boolean {
  return self.value.isDefined() and self.value.startsWith('org');
}

@cached
operation KMEHR!CDHCPARTY isPractitioner() : Boolean {
  return self.value.isDefined() and self.value.startsWith('pers');
}

operation KMEHR!CDITEM isCDItemWithValue(expectedValue: String): Boolean {
  return self.s = KMEHR!CDITEMschemes#CDITEM and self.value = expectedValue;
}

@cached
operation KMEHR!HcpartyType isOrganization() : Boolean {
  return self.cd.exists(cd | cd.isOrganization());
}

@cached
operation KMEHR!HcpartyType isPractitioner() : Boolean {
  return self.cd.exists(cd | cd.isPractitioner());
}

@cached
operation KMEHR!ItemType isContactPerson() : Boolean {
  return self.cd.exists(cd | cd.isCDItemWithValue('contactperson'));
}

@cached
operation KMEHR!ItemType isMedication(): Boolean {
  return self.cd.exists(cd | cd.isCDItemWithValue('medication'));
}

@cached
operation KMEHR!ItemType isAllergy(): Boolean {
  return self.cd.exists(cd | cd.isCDItemWithValue('allergy'));
}

@cached
operation KMEHR!ItemType isIntolerance(): Boolean {
  return self.cd.exists(cd | cd.isCDItemWithValue('adr'));
}

@cached
operation KMEHR!ItemType isActiveProblem(): Boolean {
  return self.cd.exists(cd | cd.isCDItemWithValue('problem') and self.lifecycle.cd.value = KMEHR!CDLIFECYCLEvalues#active);
}

@cached
operation KMEHR!ItemType isInactiveProblem(): Boolean {
  return self.cd.exists(cd | cd.isCDItemWithValue('problem') and self.lifecycle.cd.value = KMEHR!CDLIFECYCLEvalues#inactive);
}

@cached
operation KMEHR!ItemType isVaccine(): Boolean {
  return self.cd.exists(cd | cd.isCDItemWithValue('vaccine'));
}

@cached
operation KMEHR!ItemType refPrefix(): String {
  if (self.isMedication()) {
    return 'Medication/';
  } else if (self.isAllergy() or self.isIntolerance()) {
    return 'AllergyIntolerance/';
  } else if (self.isActiveProblem() or self.isInactiveProblem()) {
    return 'Condition/';
  } else if (self.isVaccine()) {
    return 'Immunization/';
  } else {
    return 'Unknown/';
  }
}

@cached
operation KMEHR!TransactionType txAuthor() : KMEHR!HcpartyType {
  return self.author.txAuthor();
}

@cached
operation KMEHR!AuthorType txAuthor() : KMEHR!HcpartyType {
  return self.hcparty.first;
}

@cached
operation KMEHR!TelecomType system() {
  var systemStr = self.cd.select(cd | cd.s = KMEHR!CDTELECOMschemes#CDTELECOM)
    .collect(cd | cd.value).selectFirst(v | v.isDefined());

  return systemMap.get(systemStr) ?: FHIR!ContactPointSystemEnum#other;
}

@cached
operation KMEHR!TelecomType contactPointUse() {
  if (self.cd.exists(cd | cd.s = KMEHR!CDTELECOMschemes#CDTELECOM and cd.value = 'phone')) {
    if (self.eContainer.isKindOf(KMEHR!PersonType)) {
      return FHIR!ContactPointUseEnum#home;
    } else {
      return FHIR!ContactPointUseEnum#work;
    }
  } else if (self.cd.exists(cd | cd.s = KMEHR!CDTELECOMschemes#CDTELECOM and cd.value = 'mobile')) {
    return FHIR!ContactPointUseEnum#mobile; 
  }

  return null;
}

@cached
operation KMEHR!TransactionType custodianItem(): KMEHR!ItemType {
  return s.item.selectFirst(i | i.cd.exists(cd | cd.value = 'gmdmanager'));
}

// Contact relationships

@lazy
rule PatientContactRelationship
  transform s: KMEHR!CDITEM
  to t: FHIR!CodeableConcept, coding: FHIR!Coding, roleCode: FHIR!Uri, code: FHIR!Code
{
  t.coding = Sequence { coding };
  coding.system = roleCode;
  coding.code = code;
  roleCode.value = 'http://terminology.hl7.org/CodeSystem/v3-RoleCode';
  code.value = relationshipMap.get(s.value);
}

// Gender mapping

@lazy
rule AdministrativeGender
  transform s: KMEHR!SexType
  to t: FHIR!AdministrativeGender
{
  guard: s.cd.isDefined() and s.cd.value.isDefined()
  t.value = genderMap.get(s.cd.value);
}

// BundleEntry rule hierarchy

@abstract
rule BundleEntry
  transform s: Any
  to be: FHIR!BundleEntry, fullUrl: FHIR!Uri, rc: FHIR!ResourceContainer
{
  be.fullUrl = fullUrl;
  be.resource = rc;
  fullUrl.value = 'urn:uuid:' + s.uuid();
}

rule CompositionBundleEntry
  transform s: KMEHR!TransactionType
  to be: FHIR!BundleEntry, fullUrl: FHIR!Uri, rc: FHIR!ResourceContainer
  extends BundleEntry
{
  guard: s.cd.exists(cd|cd.value = 'sumehr')
  rc.composition ::= s;
}

rule PatientBundleEntry
  transform s: KMEHR!PersonType
  to be: FHIR!BundleEntry, fullUrl: FHIR!Uri, rc: FHIR!ResourceContainer
  extends BundleEntry
{
  rc.patient = s.equivalents('Patient').selectFirst(e|e.isKindOf(FHIR!Patient));
}

// CompositionSection rule hierarchy

@abstract
rule CompositionSection
  transform s: KMEHR!TransactionType
  to t: FHIR!CompositionSection, cc: FHIR!CodeableConcept, coding: FHIR!Coding, loinc: FHIR!Uri, code: FHIR!Code
{
  t.code = cc;
  cc.coding = Sequence { coding };
  coding.system = loinc;
  coding.code = code;
  loinc.value = 'http://loinc.org';
}

@lazy
rule MedicationSection
  transform s: KMEHR!TransactionType
  to t: FHIR!CompositionSection, cc: FHIR!CodeableConcept, coding: FHIR!Coding, loinc: FHIR!Uri, code: FHIR!Code
  extends CompositionSection
{
  t.title = FhirString('Medication');

  var medItems = s.item.select(i | i.isMedication());
  t.entry = medItems.collect(i | CompositionSectionEntry(i));

  coding.display = FhirString('History of Medication use Narrative');
  code.value = '10160-0';   
}

@lazy
rule AllergyIntoleranceSection
  transform s: KMEHR!TransactionType
  to t: FHIR!CompositionSection, cc: FHIR!CodeableConcept, coding: FHIR!Coding, loinc: FHIR!Uri, code: FHIR!Code
  extends CompositionSection
{
  t.title = FhirString('Allergies and Intolerances');

  var medItems = s.item.select(i | i.isAllergy() or i.isIntolerance());
  t.entry = medItems.collect(i | CompositionSectionEntry(i));

  coding.display = FhirString('Allergies and adverse reactions Document');
  code.value = '48765-2';
}

@lazy
rule ActiveProblemSection
  transform s: KMEHR!TransactionType
  to t: FHIR!CompositionSection, cc: FHIR!CodeableConcept, coding: FHIR!Coding, loinc: FHIR!Uri, code: FHIR!Code
  extends CompositionSection
{
  t.title = FhirString('Active Problems');

  var medItems = s.item.select(i | i.isActiveProblem());
  t.entry = medItems.collect(i | CompositionSectionEntry(i));

  coding.display = FhirString('Problem list Reported');
  code.value = '11450-4';
}

@lazy
rule ImmunizationSection
  transform s: KMEHR!TransactionType
  to t: FHIR!CompositionSection, cc: FHIR!CodeableConcept, coding: FHIR!Coding, loinc: FHIR!Uri, code: FHIR!Code
  extends CompositionSection
{
  t.title = FhirString('Immunizations');

  var medItems = s.item.select(i | i.isVaccine());
  t.entry = medItems.collect(i | CompositionSectionEntry(i));

  coding.display = FhirString('History of Immunization Narrative');
  code.value = '11369-6';
}

@lazy
rule HistorySection
  transform s: KMEHR!TransactionType
  to t: FHIR!CompositionSection, cc: FHIR!CodeableConcept, coding: FHIR!Coding, loinc: FHIR!Uri, code: FHIR!Code
  extends CompositionSection
{
  t.title = FhirString('History of Past Illness');

  var medItems = s.item.select(i | i.isInactiveProblem());
  t.entry = medItems.collect(i | CompositionSectionEntry(i));

  coding.display = FhirString('Hx of Past illness');
  code.value = '11348-0';
}

// "LAZY RULE" OPERATIONS

operation CodeableConcept(coding: FHIR!Coding) {
  var type = new FHIR!CodeableConcept;
  type.coding = Sequence { coding };
  return type;
}

operation CodingWithDisplay(system: String, code: String, display: String) {
  var coding = new FHIR!Coding;
  coding.display = FhirString(display.trim());
  return coding;
}

operation CompositionIdentifier(uuid: String) {
  var ips = new FHIR!Identifier;
  ips.system = new FHIR!Uri;
  ips.value = FhirString(uuid);
  ips.system.value = 'urn:oid:2.16.724.4.8.10.200.10';
  return ips;
}

operation CompositionSectionEntry(s: KMEHR!ItemType) {
  var t = new FHIR!Reference;
  t.reference = FhirString(s.refPrefix() + s.uuid());
  return t;
}

operation FhirBoolean(s: Boolean): FHIR!fhir::`Boolean` {
  var fhirB = new FHIR!fhir::`Boolean`;
  fhirB.value = s;
  return fhirB;
}

rule FhirDate
  transform s: KMEHR!DateType
  to t: FHIR!fhir::Date
{
  guard: s.date.isDefined()
  t.value = s.date;
}

operation FhirString(uuid: String) {
  var fhirS = new FHIR!`fhir::String`;
  fhirS.value = uuid;
  return fhirS;
}